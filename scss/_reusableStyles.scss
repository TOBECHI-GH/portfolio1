//The var() function is used to insert the value of a CSS variable.

.gradient {
  background: var(--gradient);
}

.defaultMargin {
  margin: 0 14rem;
}

// This linear gradient starts at the top and then from left to right
// background-origin property specifies the origin position (the background positioning area) of a background image.
// It could be padding-box, border-box or content-box
// in border-box, the background image starts from the upper left corner of the border
// background-clip property defines how far the background (color or image) should extend within an element. It could also be padding-box, border-box or content-box
// The box-shadow property defines the shadow of an element: first value is horizontal offset, second value is vertical offset, third value is blur, fourth value is spread and lastly shadow color
// Inset: Changes the shadow from an outer shadow (outset) to an inner shadow. Inset is kind of padding-box in origin
// gap: sets the gap between rows and columns
// Idea is to let the bck-img origin of both gradient start from the border-box
// then clip the first to the content-box and the second to the border-box
// but in order to see the cliped part of the second gradient, we need to make the border transparent
button {
  color: white;
  text-transform: uppercase;
  padding: 1rem 1.8rem;
  background-image: linear-gradient(
      rgba(255, 255, 255, 0),
      rgba(255, 255, 255, 0)
    ),
    linear-gradient(to right, #dce35b, #45b649);
  background-origin: border-box;
  background-clip: content-box, border-box;
  box-shadow: 2px 100px 1px #0b0b0b inset;
  border: solid 4px transparent;
  display: flex;
  gap: 1rem;
  align-items: center;
  cursor: pointer;
}

// Idea of coil is that if height is not stated, it will be zero and the origin of the div is on the horizontal axis (center). The border-top will also be at the center
.spring {
  display: flex;
  align-items: center;
  margin: 6rem 0;
  .coil {
    border-top: white dashed 0.1rem;
    width: 49.75%;
  }
  .bar {
    width: 0.5%;
    height: 7rem;
  }
}

.right {
  flex-direction: row-reverse;
}

// .right is for bar and coil

.title_container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 6rem;
  text-align: center;
  h2 {
    color: white;
  }
  p {
    color: rgb(153, 153, 153);
  }
}

h3 {
  color: white;
}

p {
  color: rgb(129, 128, 128);
}

.design {
  position: relative;
  .background {
    height: 10rem;
    width: 12rem;
    background: linear-gradient(to right, #dce35b, #45b649);
    position: absolute;
    z-index: -1;
    left: -10px;
    top: -8px;
  }
}

.right-box {
  .background {
    top: auto;
    left: auto;
    right: -10px;
    bottom: -8px;
  }
}

// Just buy puting the .right-box {.background} down, the CSS cascading works and takes preference. If it were before .design {.background}, the right-box will be up
// top and left: auto : 	Lets the browser calculate the top edge position. This is default
// We used auto to reset the box to its normal position and remove the inherited value
