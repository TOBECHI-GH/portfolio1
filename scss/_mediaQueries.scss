@media screen and (min-width: 280px) and (max-width: 1080px) {
  body {
    overflow-x: hidden;
  }
  .defaultMargin {
    margin: 0 10vw;
  }
  .navbar {
    .brand_container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 2rem;
      width: 100%;
      .toggle {
        display: block;
      }
    }
    .links {
      display: none;
    }
  }
  .hero {
    margin: 0 10vw;
    height: 100%;
    display: flex;
    flex-direction: column-reverse;
    gap: 2rem;
    //border: 3px solid red;
    .content {
      // display: flex;
      // flex-direction: column;
      align-items: center;
      //border: solid 3px purple;
      .title {
        h1 {
          font-size: 3rem;
        }
      }
    }
    .image {
      position: initial;
      //border: 3px solid blue;
      img {
        position: initial;
        height: 100%;
        width: 100%;
      }
    }
  }
  .about {
    margin: 0 10vw;
    img {
      width: 100% !important;
    }
  }

  .portfolio {
    .container {
      grid-template-columns: 1fr;
      .portfolio_container {
        padding: 1rem;
        image {
          width: 200px;
          img {
            &:hover {
              top: -240x !important;
            }
          }
        }
        &:nth-of-type(2) {
          .image {
            img {
              &:hover {
                top: -246px;
              }
            }
          }
        }
      }
    }
  }

  .skills {
    .content {
      flex-direction: column;
      justify-content: center;
      align-items: center;
    }
  }

  .services {
    .container {
      // display: flex;
      // flex-direction: column;
      // align-items: center;
      grid-template-columns: 1fr;
    }
  }

  .languages {
    .container {
      flex-direction: column;
      align-items: center;
    }
  }

  .contact {
    flex-direction: column;
    //align-items: center;
    margin: 2rem 10vw;
    gap: 5vw;
    .left {
      .form {
        //align-items: center;
        input {
          padding-right: 10vw;
        }
      }
    }
    .right {
      width: 100%;
      img {
        width: 100%;
      }
    }
  }

  footer {
    padding: 5vw 10vw;
    grid-template-columns: 1fr;
    gap: 10vw;
  }

  .lower_footer {
    flex-direction: column;
    gap: 1rem;
    align-items: center;
    padding: 5vw;
    text-align: center;
  }
}

// Position initial, position initial, nice trick......but what exactly is initial?

// Position default value is static

// top, left, bottom, and right of position are called offset properties. They will not have any effect if the position is static

// top, left, bottom, and right can work on just relative property without position absolute
// z-index will also not work with position static. The value must be relative, fixed, sticky or absolute.
// In HTML, an element that sits at the bottom of a container will be positioned above the preceding elements
// The same goes for ::before and ::after pseudo-elements
// All position values other than static will create a stacking context.
// opacity , transform , filter , perspective , clip-path , mask , and isolation will also create a stacking context.
//When z-index is not behaving as expected, check whether any properties have triggered a new stacking context.
// What are HTML replaced elements like img tag

// NOTE: Some fonts have space above and below the characters

// Please note that the mediaquery css is still inheriting some from the original css

// Enable display: block
// Disable display: none

// In the first media query for responsiveness and small screen (min) to laptop size (max), the links (class link) are hidden with display none and then the toggle class (bars icon) is enabled with display block.

// PLEASE NOTE: The core of a pseudo-element is the content property.
// PLEASE NOTE: The default display value of a pseudo-element is inline. So, when you add a width, height, vertical padding or vertical margin, it wonâ€™t work unless the display type is changed to a value other than inline .

// CLEARFIX HACK ==> FLOAT

// ::before and ::after pseudo-elements
// The ::before pseudo-element becomes the ^rst child of its parent, whereas ::after is added as the last child.
// ]ere is a common use case for pseudo-elements, which is to absolutely position an overlay on top of a card component.

// NOTE PLEASE: But when the parent div does not have a specified width and height, what will the child % percentage width and height values refer to? It refers to screen size

// Please whenever you hear the word margin, just think of the space outside the BORDER!!!
