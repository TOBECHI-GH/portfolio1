// Flex-start Items are positioned at the beginning of the container (top)
// The align-items and align-self properties control alignment of our flex items on the cross axis, down the columns if flex-direction is row and along the row if flex-direction is column.
// vh and vw allow to size elements and font sizes as a percentage of the total width or height of the userâ€™s screen. Note: This stays true when the viewport is resized
// Please Note: Viewport units are great to help create hero sections that take up the exact height of the viewport.
// The CSS object-fit property is used to specify how an <img> or <video> should be resized to fit its container.
// cover - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit

// Please note that justify-content is only for the main-axis. Items are treated as a group on the main-axis
// Please note that there are two property to align on the cross-axis (1) align-self (2) align-items
// align-items : controls alignment of all items on the cross axis.
// align-self : controls alignment of an individual flex item on the cross axis.
// align-content : If you have a *wrapped multiple-line flex container then you might also want to use the align-content property to control the distribution of space between the rows. Still for only cross-axis.
// Justify-items is for CSS Grid
// *Flex-direction column reverses the position of the cross and main axis. Flex direction row is default and normal
// direction (ltr, rtl) is different from flex-direction
// row-reverse wiil swap the normal row. Start will become end and end will become start. Then the items will go and start on the start end. justify content (say end) will find the current end
// gap is shorthand for row-gap and column-gap
// The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines.
// nowrap: The flex items are laid out in a single line which may cause the flex container to overflow.
// wrap: The flex items break into multiple lines.
// wrap-reverse: Behaves the same as wrap but cross-start and cross-end are permuted.

.hero {
  display: grid;
  grid-template-columns: 50% 50%;
  overflow: hidden;
  height: 60vh;
  .content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    gap: 2rem;
    //border: 3px solid blue;
    .title {
      h1 {
        @include gradientText;
        font-size: 6vw;
      }
    }
  }
  .image {
    position: relative;
    //border: 3px solid red;
    img {
      position: absolute;
      bottom: 0;
      height: 85vh;
      width: 50vw;
      object-fit: cover;
    }
  }
}

// Avoid using 100vh, even for the hero section

// object-fit has absolutely nothing to do with parent container, but all about aspect-ratio

// Absolutely positioning a grid item (img) in its container (class image) can stop the entire grid container from growing with the height of an item. Why? because, it is taken out of normal document flow

// Position relative to increase z indez, position absolute to take out of normal document flow and apply bottom, bottom 0 to jack the image up

// They found out that 85vh was good with object-fit cover (aspect ratio), but since it would increase the grid container, they took it out of normal document flow with absolute. Then since the image has a large black space at the top, they used bottom 0 to jack it up, and finally overflow hidden to trim the black space.

// Position relative will make the element have a higher z index

// NOTE: Grid will grow in height depending on the largest height of its item even when given its own height. Overflow hidden can trim item height

// Always use viewport units for hero section.

// Img technique: put img inside a parent image div. Then the img should have the css properties: width, height and object-fit : cover

// Parent divs are usually not given a width since the default is 100vw or 100%
